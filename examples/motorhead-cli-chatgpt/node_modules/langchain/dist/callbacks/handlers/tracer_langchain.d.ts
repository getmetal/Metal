import { BaseTracer, Run, BaseRun } from "./tracer.js";
import { Optional } from "../../types/type-utils.js";
export interface RunCreate extends BaseRun {
    child_runs: this[];
    session_id: string;
}
export interface BaseTracerSession {
    start_time: number;
    name?: string;
}
export interface BaseTracerSessionV2 extends BaseTracerSession {
    tenant_id: string;
}
export interface TracerSessionCreateV2 extends BaseTracerSessionV2 {
    id?: string;
}
export interface TracerSession extends BaseTracerSessionV2 {
    id: string;
}
export declare class LangChainTracer extends BaseTracer {
    name: string;
    protected endpoint: string;
    protected headers: Record<string, string>;
    protected session: TracerSession;
    exampleId?: string;
    tenantId?: string;
    constructor(exampleId?: string, tenantId?: string);
    newSession(sessionName?: string): Promise<TracerSession>;
    loadSession(sessionName: string): Promise<TracerSession>;
    loadDefaultSession(): Promise<TracerSession>;
    protected persistSession(sessionCreate: Optional<BaseTracerSessionV2, "tenant_id">): Promise<TracerSession>;
    updateTenantId(): Promise<string>;
    protected _handleSessionResponse(endpoint: string): Promise<TracerSession>;
    private _convertToCreate;
    protected persistRun(run: Run): Promise<void>;
}
